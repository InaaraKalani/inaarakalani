/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Extracurricular = {
  _id: string;
  _type: "extracurricular";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  icon?: string;
  description?: string;
  highlights?: Array<string>;
};

export type Education = {
  _id: string;
  _type: "education";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  institution?: string;
  period?: string;
  achievements?: Array<string>;
};

export type Experiences = {
  _id: string;
  _type: "experiences";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  company?: string;
  period?: string;
  description?: string;
  achievements?: Array<string>;
  history?: Array<{
    title?: string;
    company?: string;
    period?: string;
    _key: string;
  }>;
};

export type Skills = {
  _id: string;
  _type: "skills";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: "frontend" | "backend" | "other-tools";
  description?: string;
  skills?: Array<{
    name?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "technologies";
    };
    variant?: "primary" | "accent" | "ghost";
    _key: string;
  }>;
};

export type Books = {
  _id: string;
  _type: "books";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  author?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  genre?: string;
};

export type Quotes = {
  _id: string;
  _type: "quotes";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heading?: string;
  quote?: string;
  author?: string;
  maxwidth?: "max-w-xl" | "max-w-2xl" | "max-w-3xl" | "max-w-4xl";
};

export type Inspirations = {
  _id: string;
  _type: "inspirations";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  impact?: string;
  icon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Technologies = {
  _id: string;
  _type: "technologies";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  variant?: "primary" | "accent" | "neutral";
};

export type Projects = {
  _id: string;
  _type: "projects";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  longDescription?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  liveUrl?: string;
  githubUrl?: string;
  gitlabUrl?: string;
  category?: "frontend" | "backend" | "fullstack";
  status?: "completed" | "ongoing";
  featured?: boolean;
  year?: string;
  team?: string;
  technologies?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "technologies";
  }>;
  highlights?: Array<string>;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Extracurricular | Education | Experiences | Skills | Books | Quotes | Inspirations | Technologies | Projects | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: src/sanity/queries/values.queries.ts
// Variable: inspirationsQuery
// Query: *    [_type=="inspirations"]|order(date asc)    {name, title, image, impact}
export type InspirationsQueryResult = Array<{
  name: string | null;
  title: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  impact: string | null;
}>;
// Variable: quotesQuery
// Query: *    [_type=="quotes"]|order(date asc)    {heading, quote, author, maxwidth}
export type QuotesQueryResult = Array<{
  heading: string | null;
  quote: string | null;
  author: string | null;
  maxwidth: "max-w-2xl" | "max-w-3xl" | "max-w-4xl" | "max-w-xl" | null;
}>;
// Variable: booksQuery
// Query: *    [_type=="books"]|order(date asc)    {title, author, image, genre}
export type BooksQueryResult = Array<{
  title: string | null;
  author: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  genre: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*\n    [_type==\"inspirations\"]|order(date asc)\n    {name, title, image, impact}\n": InspirationsQueryResult;
    "*\n    [_type==\"quotes\"]|order(date asc)\n    {heading, quote, author, maxwidth}\n": QuotesQueryResult;
    "*\n    [_type==\"books\"]|order(date asc)\n    {title, author, image, genre}\n": BooksQueryResult;
  }
}
